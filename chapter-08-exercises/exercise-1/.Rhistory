# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("RX Bar")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Clam Chowder", "Oyster Crackers", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("Pizza bagels", "water")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
class(dinner)
dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("breakfast", "lunch")]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items_eaten <- lapply(meals, length)
View(items_eaten)
items_eaten[[5]]
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector) {
return(append(vector, "pizza"))
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# part 2.1
books <- c("Three Men in a Boat",
"I Am the Lorax",
"The Last Girl on Earth",
"Ender's Game",
"Tangerine",
"Milk and Vine: Inspirational Quotes From Classic Vines")
print(books)
# part 2.2
top_three_books <- books[1:3]
print(top_three_books)
# part 2.3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# part 2.5
books_without_five <- remove_book(books, 5)
print(books_without_five)
# part 2.4
remove_book <- function(book_vector, index) {
# This function assumes that the user input a positive index
index <- index * -1
return(book_vector[index])
}
# part 2.5
books_without_five <- remove_book(books, 5)
print(books_without_five)
# part 2.6
long_titles <- books[str_length(books) > 15]
print(long_titles)
# part 2.6
long_titles <- books[str_length(books) > 15]
# install.packages("stringr")
library(stringr)
# part 2.6
long_titles <- books[str_length(books) > 15]
print(long_titles)
# part 3.1
numbers <- 1:201
# part 3.2
squared_numbers <- numbers * numbers
# part 3.3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# part 3.4
squared_median <- median(squared_numbers)
print(squared_median)
# part 3.5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
# part 4.6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
# part 4.5
change_year <- function(date, year) {
date_string <- as.character(date)
date_string <- substr(date_string, 5, nchar(date_string))
date_string <- paste(year, date_string, sep = "")
return(as.Date(date_string))
}
# part 4.6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
# part 4.1
# need to use format here because m/d/y is not standard, instead y-m-d or y/m/d is
spring_break <- as.Date("3/21/2020", format = "%m/%d/%y")
# part 4.3
today <- Sys.Date()
# part 4.4
days_to_break <- spring_break - today
print(days_to_break)
# part 4.5
change_year <- function(date, year) {
date_string <- as.character(date)
date_string <- substr(date_string, 5, nchar(date_string))
date_string <- paste(year, date_string, sep = "")
return(as.Date(date_string))
}
# part 4.6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
print(class(spring_break_2025))
print(spring_break_2025)
# part 4.8
print(date_has_passed(as.Date("2020-01-23")))
# print 4.7 + 4.7e
date_has_passed <- function(date, ignore_year = F) {
today <- Sys.Date()
if (ignore_year) {
today <- change_year(today, 2000)
date <- change_year(date, 2000)
}
return(today - date > 0)
}
# part 4.8
print(date_has_passed(as.Date("2020-01-23")))
# part 4.9
birthdays <- list(me = as.Date("2000-3-13"),
maddy = as.Date("1996-4-16"),
aaron = as.Date("1998-4-1"),
mom = as.Date("1975-10-28"),
dad = as.Date("1970-3-10"))
# part 4.10
get_next_birthday <- function(birthdate) {
# to make this function work in any year, i got the year from sys.date()
curr_year <- substring(Sys.Date(), 1, 4)
birthdate <- change_year(birthdate, curr_year)
if(date_has_passed(birthdate)) {
# this part adds one to the current year we got earlier, so this function can be run any year
curr_year <- as.Date(as.character(as.numeric(curr_year) + 1), format = "%Y")
curr_year <- substring(curr_year, 1, 4)
birthdate <- change_year(birthdate, curr_year)
}
return(birthdate)
}
# part 4.11
print(get_next_birthday(birthdays$me))
# part 4.9
birthdays <- list(me = as.Date("2000-1-13"),
maddy = as.Date("1996-4-16"),
aaron = as.Date("1998-4-1"),
mom = as.Date("1975-10-28"),
dad = as.Date("1970-3-10"))
print(birthdays)
# part 4.10
get_next_birthday <- function(birthdate) {
# to make this function work in any year, i got the year from sys.date()
curr_year <- substring(Sys.Date(), 1, 4)
birthdate <- change_year(birthdate, curr_year)
if(date_has_passed(birthdate)) {
# this part adds one to the current year we got earlier, so this function can be run any year
curr_year <- as.Date(as.character(as.numeric(curr_year) + 1), format = "%Y")
curr_year <- substring(curr_year, 1, 4)
birthdate <- change_year(birthdate, curr_year)
}
return(birthdate)
}
# part 4.11
print(get_next_birthday(birthdays$me))
# part 4.11
print(get_next_birthday(birthdays$me))
# part 4.9
birthdays <- list(me = as.Date("2000-3-13"),
maddy = as.Date("1996-4-16"),
aaron = as.Date("1998-4-1"),
mom = as.Date("1975-10-28"),
dad = as.Date("1970-3-10"))
print(birthdays)
# part 4.10
get_next_birthday <- function(birthdate) {
# to make this function work in any year, i got the year from sys.date()
curr_year <- substring(Sys.Date(), 1, 4)
birthdate <- change_year(birthdate, curr_year)
if(date_has_passed(birthdate)) {
# this part adds one to the current year we got earlier, so this function can be run any year
curr_year <- as.Date(as.character(as.numeric(curr_year) + 1), format = "%Y")
curr_year <- substring(curr_year, 1, 4)
birthdate <- change_year(birthdate, curr_year)
}
return(birthdate)
}
# part 4.11
print(get_next_birthday(birthdays$me))
# part 4.12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
# install.packages("stringr")
library(stringr)
#################
#### PART 1 #####
#################
# part 1.1
my_age <- 19
# part 1.2
my_name <- "Thomas Serrano"
# part 1.3
make_introduction <- function(name, age) {
result <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(result)
}
# part 1.4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# part 1.5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# part 1.6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# part 1.7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# part 2.1
books <- c("Three Men in a Boat",
"I Am the Lorax",
"The Last Girl on Earth",
"Ender's Game",
"Tangerine",
"Milk and Vine: Inspirational Quotes From Classic Vines")
print(books)
# part 2.2
top_three_books <- books[1:3]
print(top_three_books)
# part 2.3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# part 2.4
remove_book <- function(book_vector, index) {
# This function assumes that the user input a positive index
index <- index * -1
return(book_vector[index])
}
# part 2.5
books_without_five <- remove_book(books, 5)
print(books_without_five)
# part 2.6
long_titles <- books[str_length(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# part 3.1
numbers <- 1:201
# part 3.2
squared_numbers <- numbers * numbers
# part 3.3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# part 3.4
squared_median <- median(squared_numbers)
print(squared_median)
# part 3.5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
# part 4.1
# need to use format here because m/d/y is not standard, instead y-m-d or y/m/d is
spring_break <- as.Date("3/21/2020", format = "%m/%d/%y")
# part 4.3
today <- Sys.Date()
# part 4.4
days_to_break <- spring_break - today
print(days_to_break)
# part 4.5
change_year <- function(date, year) {
date_string <- as.character(date)
date_string <- substr(date_string, 5, nchar(date_string))
date_string <- paste(year, date_string, sep = "")
return(as.Date(date_string))
}
# part 4.6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
# print 4.7 + 4.7e
date_has_passed <- function(date, ignore_year = F) {
today <- Sys.Date()
if (ignore_year) {
today <- change_year(today, 2000)
date <- change_year(date, 2000)
}
return(today - date > 0)
}
# part 4.8
print(date_has_passed(as.Date("2020-01-23")))
# part 4.9
birthdays <- list(me = as.Date("2000-3-13"),
maddy = as.Date("1996-4-16"),
aaron = as.Date("1998-4-1"),
mom = as.Date("1975-10-28"),
dad = as.Date("1970-3-10"))
print(birthdays)
# part 4.10
get_next_birthday <- function(birthdate) {
# to make this function work in any year, i got the year from sys.date()
curr_year <- substring(Sys.Date(), 1, 4)
birthdate <- change_year(birthdate, curr_year)
if(date_has_passed(birthdate)) {
# this part adds one to the current year we got earlier, so this function can be run any year
curr_year <- as.Date(as.character(as.numeric(curr_year) + 1), format = "%Y")
curr_year <- substring(curr_year, 1, 4)
birthdate <- change_year(birthdate, curr_year)
}
return(birthdate)
}
# part 4.11
print(get_next_birthday(birthdays$me))
# part 4.12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
