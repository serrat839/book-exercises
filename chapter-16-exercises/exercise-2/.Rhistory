# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
diamonds
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
data(diamonds)
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds) + geom_column(aes(x=cuts, y=price))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds) + geom_col(aes(x=cuts, y=price))
# Draw the same chart again, but with each element positioned to "dodge" each other
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- diamonds %>% sample_n(1000)
library(dplyr)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- diamonds %>% sample_n(1000)
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) + geom_boxplot(mapping = aes(x=color, y=price))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library(ggplot2)
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) + geom_boxplot(mapping = aes(x=color, y=price))
ggplot(data = diamonds_sample) + geom_boxplot(mapping = aes(x=color, y=price)) + scale_y_log10()
ggplot(data = diamonds_sample) + geom_violin(mapping = aes(x=color, y=price))
ggplot(data = diamonds_sample) + geom_violin(mapping = aes(x=color, y=price)) + scale_y_log10()
ggplot(data = diamonds_sample) + geom_bin2d(mapping = aes(x=color, y=price)) + scale_y_log10()
ggplot(data = diamonds_sample) + geom_bin2d(mapping = aes(x=color, y=price))
+ scale_y_log10
ggplot(data = diamonds_sample) + geom_bin2d(mapping = aes(x=color, y=price)) + scale_y_log10()
ggplot(data = diamonds_sample) + geom_bin2d(mapping = aes(x=color, y=price)) + scale_y_log10() + scale_x_log10()
ggplot(data = diamonds_sample) + geom_bin2d(mapping = aes(x=color, y=price)) + scale_y_log10()
ggplot(data = diamonds_sample) + geom_bin2d(mapping = aes(x=carat, y=price)) + scale_y_log10() + scale_x_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data) + geom_point(mapping = aes(x=carat, y=price, color = clarity)) +
scale_color_brewer(palette = "Purples")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamonds_sample) + geom_point(mapping = aes(x=carat, y=price, color = clarity)) +
scale_color_brewer(palette = "Purples")
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamonds_sample) + geom_point(mapping = aes(x=carat, y=price, color = clarity)) +
scale_color_brewer(palette = "Purples", direction = -1)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~color)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~cut)
